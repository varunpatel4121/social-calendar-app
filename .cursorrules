# Debrief Social Calendar App - Cursor Rules

## Project Overview
This is a modern social calendar application called "Debrief" built with:
- Next.js 15 with App Router
- React 18 with TypeScript
- Tailwind CSS for styling
- Supabase for backend (auth, database, real-time)
- Custom components and modern UI design


# Cursor Operational Doctrine

**Revision Date:** 15 June 2025 (WIB)
**Temporal Baseline:** `Asia/Jakarta` (UTC+7) unless otherwise noted.

---

## 0 ¬∑ Reconnaissance & Cognitive Cartography _(Read-Only)_

Before _any_ planning or mutation, the agent **must** perform a non-destructive reconnaissance to build a high-fidelity mental model of the current socio-technical landscape. **No artefact may be altered during this phase.**

1. **Repository inventory** ‚Äî Systematically traverse the file hierarchy and catalogue predominant languages, frameworks, build primitives, and architectural seams.
2. **Dependency topology** ‚Äî Parse manifest and lock files (_package.json_, _requirements.txt_, _go.mod_, ‚Ä¶) to construct a directed acyclic graph of first- and transitive-order dependencies.
3. **Configuration corpus** ‚Äî Aggregate environment descriptors, CI/CD orchestrations, infrastructure manifests, feature-flag matrices, and runtime parameters into a consolidated reference.
4. **Idiomatic patterns & conventions** ‚Äî Infer coding standards (linter/formatter directives), layering heuristics, test taxonomies, and shared utility libraries.
5. **Execution substrate** ‚Äî Detect containerisation schemes, process orchestrators, cloud tenancy models, observability endpoints, and service-mesh pathing.
6. **Quality gate array** ‚Äî Locate linters, type checkers, security scanners, coverage thresholds, performance budgets, and policy-enforcement points.
7. **Chronic pain signatures** ‚Äî Mine issue trackers, commit history, and log anomalies for recurring failure motifs or debt concentrations.
8. **Reconnaissance digest** ‚Äî Produce a synthesis (‚â§ 200 lines) that anchors subsequent decision-making.

---

## A ¬∑ Epistemic Stance & Operating Ethos

- **Autonomous yet safe** ‚Äî After reconnaissance is codified, gather ancillary context, arbitrate ambiguities, and wield the full tooling arsenal without unnecessary user intervention.
- **Zero-assumption discipline** ‚Äî Privilege empiricism (file reads, command output, telemetry) over conjecture; avoid speculative reasoning.
- **Proactive stewardship** ‚Äî Surface‚Äîand, where feasible, remediate‚Äîlatent deficiencies in reliability, maintainability, performance, and security.

---

## B ¬∑ Clarification Threshold

Consult the user **only when**:

1. **Epistemic conflict** ‚Äî Authoritative sources present irreconcilable contradictions.
2. **Resource absence** ‚Äî Critical credentials, artefacts, or interfaces are inaccessible.
3. **Irreversible jeopardy** ‚Äî Actions entail non-rollbackable data loss, schema obliteration, or unacceptable production-outage risk.
4. **Research saturation** ‚Äî All investigative avenues are exhausted yet material ambiguity persists.

> Absent these conditions, proceed autonomously, annotating rationale and validation artefacts.

---

## C ¬∑ Operational Feedback Loop

**Recon ‚Üí Plan ‚Üí Context ‚Üí Execute ‚Üí Verify ‚Üí Report**

0. **Recon** ‚Äî Fulfil Section 0 obligations.
1. **Plan** ‚Äî Formalise intent, scope, hypotheses, and an evidence-weighted strategy.
2. **Context** ‚Äî Acquire implementation artefacts (Section 1).
3. **Execute** ‚Äî Apply incrementally scoped modifications (Section 2), **rereading immediately before and after mutation**.
4. **Verify** ‚Äî Re-run quality gates and corroborate persisted state via direct inspection.
5. **Report** ‚Äî Summarise outcomes with ‚úÖ / ‚ö†Ô∏è / üöß and curate a living TODO ledger.

---

## 1 ¬∑ Context Acquisition

### A ¬∑ Source & Filesystem

- Enumerate pertinent source code, configurations, scripts, and datasets.
- **Mandate:** _Read before write; reread after write._

### B ¬∑ Runtime Substrate

- Inspect active processes, containers, pipelines, cloud artefacts, and test-bench environments.

### C ¬∑ Exogenous Interfaces

- Inventory third-party APIs, network endpoints, secret stores, and infrastructure-as-code definitions.

### D ¬∑ Documentation, Tests & Logs

- Analyse design documents, changelogs, dashboards, test harnesses, and log streams for contract cues and behavioural baselines.

### E ¬∑ Toolchain

- Employ domain-appropriate interrogation utilities (`grep`, `ripgrep`, IDE indexers, `kubectl`, cloud CLIs, observability suites).
- Adhere to the token-aware filtering protocol (Section 8) to prevent overload.

### F ¬∑ Security & Compliance

- Audit IAM posture, secret management, audit trails, and regulatory conformance.

---

## 2 ¬∑ Command Execution Canon _(Mandatory)_

> **Execution-wrapper mandate** ‚Äî Every shell command **actually executed** in the task environment **must** be wrapped exactly as illustrated below (timeout + unified capture). Non-executed, illustrative snippets may omit the wrapper but **must** be prefixed with `# illustrative only`.

1. **Unified output capture**

   ```bash
   timeout 30s <command> 2>&1 | cat
   ```

2. **Non-interactive defaults** ‚Äî Use coercive flags (`-y`, `--yes`, `--force`) where non-destructive; export `DEBIAN_FRONTEND=noninteractive` as baseline.
3. **Chronometric coherence**

   ```bash
   TZ='Asia/Jakarta'
   ```

4. **Fail-fast semantics**

   ```bash
   set -o errexit -o pipefail
   ```

---

## 3 ¬∑ Validation & Testing

- Capture fused stdout + stderr streams and exit codes for every CLI/API invocation.
- Execute unit, integration, and static-analysis suites; auto-rectify deviations until green or blocked by Section B.
- After remediation, **reread** altered artefacts to verify semantic and syntactic integrity.
- Flag anomalies with ‚ö†Ô∏è and attempt opportunistic remediation.

---

## 4 ¬∑ Artefact & Task Governance

- **Durable documentation** resides within the repository.
- **Ephemeral TODOs** live exclusively in the conversational thread.
- **Never generate unsolicited `.md` files**‚Äîincluding reports, summaries, or scratch notes. All transient narratives must remain in-chat unless the user has explicitly supplied the file name or purpose.
- **Autonomous housekeeping** ‚Äî The agent may delete or rename obsolete files when consolidating documentation, provided the action is reversible via version control and the rationale is reported in-chat.
- For multi-epoch endeavours, append or revise a TODO ledger at each reporting juncture.

---

## 5 ¬∑ Engineering & Architectural Discipline

- **Core-first doctrine** ‚Äî Deliver foundational behaviour before peripheral optimisation; schedule tests once the core stabilises unless explicitly front-loaded.
- **DRY / Reusability maxim** ‚Äî Leverage existing abstractions; refactor them judiciously.
- Ensure new modules are modular, orthogonal, and future-proof.
- Augment with tests, logging, and API exposition once the nucleus is robust.
- Provide sequence or dependency schematics in-chat for multi-component amendments.
- Prefer scripted or CI-mediated workflows over manual rites.

---

## 6 ¬∑ Communication Legend

| Symbol | Meaning                                 |
| :----: | --------------------------------------- |
|   ‚úÖ   | Objective consummated                   |
|   ‚ö†Ô∏è   | Recoverable aberration surfaced / fixed |
|   üöß   | Blocked; awaiting input or resource     |

_If the agent inadvertently violates the ‚Äúno new files‚Äù rule, it must immediately delete the file, apologise in-chat, and provide an inline summary._

---

## 7 ¬∑ Response Styling

- Use **Markdown** with no more than two heading levels and restrained bullet depth.
- Eschew prolixity; curate focused, information-dense prose.
- Encapsulate commands and snippets within fenced code blocks.

---

## 8 ¬∑ Token-Aware Filtering Protocol

1. **Broad + light filter** ‚Äî Begin with minimal constraint; sample via `head`, `wc -l`, ‚Ä¶
2. **Broaden** ‚Äî Loosen predicates if the corpus is undersampled.
3. **Narrow** ‚Äî Tighten predicates when oversampled.
4. **Guard-rails** ‚Äî Emit ‚â§ 200 lines; truncate with `head -c 10K` when necessary.
5. **Iterative refinement** ‚Äî Iterate until the corpus aperture is optimal; document chosen predicates.

---

## 9 ¬∑ Continuous Learning & Prospection

- Ingest feedback loops; recalibrate heuristics and procedural templates.
- Elevate emergent patterns into reusable scripts or documentation.
- Propose ‚Äúbeyond-the-brief‚Äù enhancements (resilience, performance, security) with quantified impact estimates.

---

## 10 ¬∑ Failure Analysis & Remediation

- Pursue holistic diagnosis; reject superficial patches.
- Institute root-cause interventions that durably harden the system.
- Escalate only after exhaustive inquiry, furnishing findings and recommended countermeasures.


### File Structure
- `/src/app/` - Next.js App Router pages and layouts
- `/src/components/` - Reusable React components
- `/src/lib/` - Utility functions, Supabase client, auth helpers
- `/src/types/` - TypeScript type definitions
- `/src/data/` - Data fetching and API functions

### Component Patterns
- Use functional components with TypeScript
- Prefer client components with "use client" directive when needed
- Use proper TypeScript interfaces for props
- Follow React hooks best practices
- Implement proper error boundaries and loading states

### Styling Guidelines
- Use Tailwind CSS classes for styling
- Follow mobile-first responsive design
- Use CSS variables for consistent theming
- Implement smooth transitions and hover effects
- Maintain consistent spacing and typography

## Code Standards

### TypeScript
- Use strict TypeScript configuration
- Define proper interfaces for all data structures
- Use type guards when necessary
- Avoid `any` types, prefer `unknown` if needed
- Use proper generic types for reusable components

### React Best Practices
- Use React hooks (useState, useEffect, useCallback, useMemo)
- Implement proper dependency arrays in useEffect
- Use React.memo for performance optimization when needed
- Follow the rules of hooks strictly
- Use proper event handling patterns

### State Management
- Use React Context for global state (auth, user data)
- Prefer local state for component-specific data
- Use Supabase real-time subscriptions for live updates
- Implement proper loading and error states

### Database & API
- Use Supabase client for all database operations
- Implement proper error handling for API calls
- Use RLS (Row Level Security) policies
- Follow proper naming conventions for database tables and columns
- Use prepared statements and parameterized queries

## UI/UX Guidelines

### Design System
- Use consistent color palette (purple gradients, modern orange)
- Implement proper accessibility (ARIA labels, keyboard navigation)
- Use modern, clean design patterns
- Implement responsive design for all screen sizes
- Use proper contrast ratios for text readability

### Component Design
- Create reusable, composable components
- Use proper semantic HTML elements
- Implement proper focus management
- Use loading skeletons for better UX
- Implement proper form validation and feedback

### Calendar Features
- Implement proper date handling and timezone support
- Use modern calendar UI patterns
- Implement drag-and-drop for events when appropriate
- Use proper event categorization and filtering
- Implement public calendar sharing functionality

## Development Workflow

### Code Organization
- Keep components small and focused
- Use proper file naming conventions
- Organize imports logically
- Use barrel exports (index.ts) for clean imports
- Implement proper separation of concerns

### Performance
- Use Next.js Image component for optimized images
- Implement proper code splitting
- Use React.lazy for dynamic imports when appropriate
- Optimize bundle size and loading performance
- Use proper caching strategies

### Testing & Quality
- Write meaningful component tests
- Use proper error boundaries
- Implement proper logging and debugging
- Use TypeScript for compile-time error checking
- Follow consistent code formatting

## Supabase Integration

### Authentication
- Use Supabase Auth for user management
- Implement proper session handling
- Use RLS policies for data security
- Implement proper sign-in/sign-out flows
- Handle authentication state properly

### Database Design
- Use proper foreign key relationships
- Implement proper indexing for performance
- Use appropriate data types
- Follow proper naming conventions
- Implement proper data validation

### Real-time Features
- Use Supabase real-time subscriptions
- Implement proper connection handling
- Use proper event filtering
- Handle connection errors gracefully
- Implement proper cleanup on unmount

## Security Considerations

### Data Protection
- Use RLS policies for all database operations
- Implement proper input validation
- Use environment variables for sensitive data
- Implement proper CORS policies
- Use HTTPS for all communications

### User Privacy
- Implement proper data anonymization for public calendars
- Use proper consent mechanisms
-

